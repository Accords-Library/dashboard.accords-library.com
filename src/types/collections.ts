/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    pages: Page;
    collectibles: Collectible;
    folders: Folder;
    "chronology-events": ChronologyEvent;
    images: Image;
    audios: Audio;
    "media-thumbnails": MediaThumbnail;
    videos: Video;
    "videos-subtitles": VideoSubtitle;
    "videos-channels": VideosChannel;
    scans: Scan;
    tags: Tag;
    "tags-groups": TagsGroup;
    recorders: Recorder;
    languages: Language;
    currencies: Currency;
    wordings: Wording;
    "generic-contents": GenericContent;
    "payload-preferences": PayloadPreference;
    "payload-migrations": PayloadMigration;
  };
  globals: {
    "website-config": WebsiteConfig;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  slug: string;
  type: "Content" | "Post" | "Generic";
  thumbnail?: string | Image | null;
  backgroundImage?: string | Image | null;
  tags?: (string | Tag)[] | null;
  authors?: (string | Recorder)[] | null;
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    pretitle?: string | null;
    title: string;
    subtitle?: string | null;
    summary?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ("ltr" | "rtl") | null;
        format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ("ltr" | "rtl") | null;
        format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    transcribers?: (string | Recorder)[] | null;
    translators?: (string | Recorder)[] | null;
    proofreaders?: (string | Recorder)[] | null;
    id?: string | null;
  }[];
  folders?: (string | Folder)[] | null;
  collectibles?: (string | Collectible)[] | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ("draft" | "published") | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  translations?:
    | {
        language: string | Language;
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ("ltr" | "rtl") | null;
            format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  tags?: (string | Tag)[] | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "languages".
 */
export interface Language {
  id: string;
  name: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name?: string | null;
  slug: string;
  translations: {
    language: string | Language;
    name: string;
    id?: string | null;
  }[];
  group: string | TagsGroup;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags-groups".
 */
export interface TagsGroup {
  id: string;
  slug: string;
  icon?: string | null;
  translations: {
    language: string | Language;
    name: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recorders".
 */
export interface Recorder {
  id: string;
  username: string;
  avatar?: string | Image | null;
  languages?: (string | Language)[] | null;
  role?: ("Admin" | "Recorder" | "Api")[] | null;
  anonymize: boolean;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "folders".
 */
export interface Folder {
  id: string;
  slug: string;
  icon?: string | null;
  parentFolders?: (string | Folder)[] | null;
  translations: {
    language: string | Language;
    name: string;
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ("ltr" | "rtl") | null;
        format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    id?: string | null;
  }[];
  sections?:
    | {
        translations?:
          | {
              language: string | Language;
              name: string;
              id?: string | null;
            }[]
          | null;
        subfolders?: (string | Folder)[] | null;
        id?: string | null;
      }[]
    | null;
  files?:
    | (
        | {
            relationTo: "collectibles";
            value: string | Collectible;
          }
        | {
            relationTo: "pages";
            value: string | Page;
          }
        | {
            relationTo: "videos";
            value: string | Video;
          }
        | {
            relationTo: "images";
            value: string | Image;
          }
        | {
            relationTo: "audios";
            value: string | Audio;
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "collectibles".
 */
export interface Collectible {
  id: string;
  slug: string;
  thumbnail?: string | Image | null;
  nature: "Physical" | "Digital";
  languages?: (string | Language)[] | null;
  tags?: (string | Tag)[] | null;
  translations: {
    language: string | Language;
    pretitle?: string | null;
    title: string;
    subtitle?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ("ltr" | "rtl") | null;
        format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    id?: string | null;
  }[];
  backgroundImage?: string | Image | null;
  gallery?:
    | {
        image: string | Image;
        id?: string | null;
      }[]
    | null;
  scansEnabled?: boolean | null;
  scans?: {
    scanners: (string | Recorder)[];
    cleaners: (string | Recorder)[];
    typesetters?: (string | Recorder)[] | null;
    coverEnabled?: boolean | null;
    cover?: {
      front?: string | Scan | null;
      spine?: string | Scan | null;
      back?: string | Scan | null;
      insideFront?: string | Scan | null;
      insideBack?: string | Scan | null;
      flapFront?: string | Scan | null;
      flapBack?: string | Scan | null;
      insideFlapFront?: string | Scan | null;
      insideFlapBack?: string | Scan | null;
    };
    dustjacketEnabled?: boolean | null;
    dustjacket?: {
      front?: string | Scan | null;
      spine?: string | Scan | null;
      back?: string | Scan | null;
      insideFront?: string | Scan | null;
      insideSpine?: string | Scan | null;
      insideBack?: string | Scan | null;
      flapFront?: string | Scan | null;
      flapBack?: string | Scan | null;
      insideFlapFront?: string | Scan | null;
      insideFlapBack?: string | Scan | null;
    };
    obiEnabled?: boolean | null;
    obi?: {
      front?: string | Scan | null;
      spine?: string | Scan | null;
      back?: string | Scan | null;
      insideFront?: string | Scan | null;
      insideSpine?: string | Scan | null;
      insideBack?: string | Scan | null;
      flapFront?: string | Scan | null;
      flapBack?: string | Scan | null;
      insideFlapFront?: string | Scan | null;
      insideFlapBack?: string | Scan | null;
    };
    pages?:
      | {
          page: number;
          image: string | Scan;
          id?: string | null;
        }[]
      | null;
  };
  urls?:
    | {
        url: string;
        id?: string | null;
      }[]
    | null;
  releaseDate?: string | null;
  priceEnabled?: boolean | null;
  price?: {
    amount: number;
    currency: string | Currency;
  };
  sizeEnabled?: boolean | null;
  size?: {
    width: number;
    height: number;
    thickness?: number | null;
  };
  weightEnabled?: boolean | null;
  weight?: {
    amount: number;
  };
  pageInfoEnabled?: boolean | null;
  pageInfo?: {
    pageCount: number;
    bindingType?: ("Paperback" | "Hardcover") | null;
    pageOrder?: ("Left to right" | "Right to left") | null;
  };
  folders?: (string | Folder)[] | null;
  parentItems?: (string | Collectible)[] | null;
  subitems?: (string | Collectible)[] | null;
  contents?:
    | {
        content:
          | {
              relationTo: "pages";
              value: string | Page;
            }
          | {
              relationTo: "generic-contents";
              value: string | GenericContent;
            }
          | {
              relationTo: "audios";
              value: string | Audio;
            }
          | {
              relationTo: "videos";
              value: string | Video;
            };
        range?:
          | (
              | {
                  start: number;
                  end: number;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: "pageRange";
                }
              | {
                  start: string;
                  end: string;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: "timeRange";
                }
              | {
                  translations: {
                    language: string | Language;
                    note: {
                      root: {
                        type: string;
                        children: {
                          type: string;
                          version: number;
                          [k: string]: unknown;
                        }[];
                        direction: ("ltr" | "rtl") | null;
                        format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
                        indent: number;
                        version: number;
                      };
                      [k: string]: unknown;
                    };
                    id?: string | null;
                  }[];
                  id?: string | null;
                  blockName?: string | null;
                  blockType: "other";
                }
            )[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ("draft" | "published") | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "scans".
 */
export interface Scan {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies".
 */
export interface Currency {
  id: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generic-contents".
 */
export interface GenericContent {
  id: string;
  name: string;
  translations: {
    language: string | Language;
    name: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audios".
 */
export interface Audio {
  id: string;
  duration: number;
  thumbnail?: string | MediaThumbnail | null;
  translations: {
    language: string | Language;
    title: string;
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ("ltr" | "rtl") | null;
        format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    subfile?: string | VideoSubtitle | null;
    id?: string | null;
  }[];
  tags?: (string | Tag)[] | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media-thumbnails".
 */
export interface MediaThumbnail {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos-subtitles".
 */
export interface VideoSubtitle {
  id: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
  id: string;
  duration: number;
  thumbnail: string | MediaThumbnail;
  translations: {
    language: string | Language;
    title: string;
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ("ltr" | "rtl") | null;
        format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    subfile?: string | VideoSubtitle | null;
    id?: string | null;
  }[];
  tags?: (string | Tag)[] | null;
  platformEnabled?: boolean | null;
  platform?: {
    channel: string | VideosChannel;
    views?: number | null;
    likes?: number | null;
    dislikes?: number | null;
    url: string;
    publishedDate: string;
  };
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos-channels".
 */
export interface VideosChannel {
  id: string;
  url: string;
  title: string;
  subscribers?: number | null;
  videos?: (string | Video)[] | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chronology-events".
 */
export interface ChronologyEvent {
  id: string;
  name?: string | null;
  date: {
    year: number;
    month?: number | null;
    day?: number | null;
  };
  events: {
    sources?: (UrlBlock | CollectibleBlock | PageBlock)[] | null;
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      title?: string | null;
      description?: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ("ltr" | "rtl") | null;
          format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      notes?: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ("ltr" | "rtl") | null;
          format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      transcribers?: (string | Recorder)[] | null;
      translators?: (string | Recorder)[] | null;
      proofreaders?: (string | Recorder)[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ("draft" | "published") | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UrlBlock".
 */
export interface UrlBlock {
  url: string;
  id?: string | null;
  blockName?: string | null;
  blockType: "urlBlock";
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CollectibleBlock".
 */
export interface CollectibleBlock {
  collectible: string | Collectible;
  range?:
    | (
        | {
            page: number;
            id?: string | null;
            blockName?: string | null;
            blockType: "page";
          }
        | {
            timestamp: string;
            id?: string | null;
            blockName?: string | null;
            blockType: "timestamp";
          }
        | {
            translations: {
              language: string | Language;
              note: string;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: "other";
          }
      )[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: "collectibleBlock";
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PageBlock".
 */
export interface PageBlock {
  page: string | Page;
  id?: string | null;
  blockName?: string | null;
  blockType: "pageBlock";
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wordings".
 */
export interface Wording {
  id: string;
  name: string;
  translations: {
    language: string | Language;
    name: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: "recorders";
    value: string | Recorder;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "website-config".
 */
export interface WebsiteConfig {
  id: string;
  homeFolders?:
    | {
        lightThumbnail?: string | Image | null;
        darkThumbnail?: string | Image | null;
        folder: string | Folder;
        id?: string | null;
      }[]
    | null;
  timeline?: {
    breaks?: number[] | null;
    eras?:
      | {
          name: string | Wording;
          startingYear: number;
          endingYear: number;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LineBlock".
 */
export interface LineBlock {
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: "lineBlock";
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CueBlock".
 */
export interface CueBlock {
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: "cueBlock";
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TranscriptBlock".
 */
export interface TranscriptBlock {
  lines: (LineBlock | CueBlock)[];
  id?: string | null;
  blockName?: string | null;
  blockType: "transcriptBlock";
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BreakBlock".
 */
export interface BreakBlock {
  type: "Scene break" | "Empty space" | "Solid line" | "Dotted line";
  id?: string | null;
  blockName?: string | null;
  blockType: "breakBlock";
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SectionBlock".
 */
export interface SectionBlock {
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: "sectionBlock";
}

declare module "payload" {
  export interface GeneratedTypes extends Config {}
}
