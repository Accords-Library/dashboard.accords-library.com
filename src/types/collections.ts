/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export type RecorderBiographies =
  | {
      language: string | Language;
      biography: {
        [k: string]: unknown;
      }[];
      id?: string | null;
    }[]
  | null;
export type CategoryTranslations =
  | {
      language: string | Language;
      name: string;
      short?: string | null;
      id?: string | null;
    }[]
  | null;

export interface Config {
  collections: {
    'library-folders': LibraryFolder;
    'library-items': LibraryItem;
    contents: Content;
    'contents-folders': ContentsFolder;
    posts: Post;
    'chronology-items': ChronologyItem;
    'chronology-eras': ChronologyEra;
    weapons: Weapon;
    'weapons-groups': WeaponsGroup;
    'weapons-thumbnails': WeaponsThumbnail;
    'contents-thumbnails': ContentsThumbnail;
    'library-items-thumbnails': LibraryItemThumbnail;
    'library-items-scans': LibraryItemScans;
    'library-items-gallery': LibraryItemGallery;
    'recorders-thumbnails': RecordersThumbnail;
    'posts-thumbnails': PostThumbnail;
    files: File;
    Notes: Note;
    videos: Video;
    'videos-channels': VideosChannel;
    languages: Language;
    currencies: Currency;
    recorders: Recorder;
    keys: Key;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
export interface LibraryFolder {
  id: string;
  slug: string;
  translations?:
    | {
        language: string | Language;
        name: string;
        description?:
          | {
              [k: string]: unknown;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  parentFolders?: (string | LibraryFolder)[] | null;
  subfolders?: (string | LibraryFolder)[] | null;
  items?: (string | LibraryItem)[] | null;
}
export interface Language {
  id: string;
  name: string;
}
export interface LibraryItem {
  id: string;
  itemType?: ('Textual' | 'Audio' | 'Video' | 'Game' | 'Other') | null;
  language: string | Language;
  slug: string;
  thumbnail?: string | LibraryItemThumbnail | null;
  pretitle?: string | null;
  title: string;
  subtitle?: string | null;
  digital: boolean;
  gallery?:
    | {
        image?: string | LibraryItemGallery | null;
        id?: string | null;
      }[]
    | null;
  scansEnabled?: boolean | null;
  scans?: {
    scanners: (string | Recorder)[];
    cleaners: (string | Recorder)[];
    typesetters?: (string | Recorder)[] | null;
    coverEnabled?: boolean | null;
    cover?: {
      front?: string | LibraryItemScans | null;
      spine?: string | LibraryItemScans | null;
      back?: string | LibraryItemScans | null;
      insideFront?: string | LibraryItemScans | null;
      flapFront?: string | LibraryItemScans | null;
      flapBack?: string | LibraryItemScans | null;
      insideFlapFront?: string | LibraryItemScans | null;
      insideFlapBack?: string | LibraryItemScans | null;
    };
    dustjacketEnabled?: boolean | null;
    dustjacket?: {
      front?: string | LibraryItemScans | null;
      spine?: string | LibraryItemScans | null;
      back?: string | LibraryItemScans | null;
      insideFront?: string | LibraryItemScans | null;
      insideSpine?: string | LibraryItemScans | null;
      insideBack?: string | LibraryItemScans | null;
      flapFront?: string | LibraryItemScans | null;
      flapBack?: string | LibraryItemScans | null;
      insideFlapFront?: string | LibraryItemScans | null;
      insideFlapBack?: string | LibraryItemScans | null;
    };
    obiEnabled?: boolean | null;
    obi?: {
      front?: string | LibraryItemScans | null;
      spine?: string | LibraryItemScans | null;
      back?: string | LibraryItemScans | null;
      insideFront?: string | LibraryItemScans | null;
      insideSpine?: string | LibraryItemScans | null;
      insideBack?: string | LibraryItemScans | null;
      flapFront?: string | LibraryItemScans | null;
      flapBack?: string | LibraryItemScans | null;
      insideFlapFront?: string | LibraryItemScans | null;
      insideFlapBack?: string | LibraryItemScans | null;
    };
    pages?:
      | {
          page: number;
          image: string | LibraryItemScans;
          id?: string | null;
        }[]
      | null;
    archiveFile?: (string | null) | File;
  };
  textual?: {
    subtype?: (string | null) | Key;
    pageCount?: number | null;
    bindingType?: ('Paperback' | 'Hardcover') | null;
    pageOrder?: ('LeftToRight' | 'RightToLeft') | null;
  };
  audio?: {
    audioSubtype?: (string | null) | Key;
    tracks?:
      | {
          title: string;
          file: string | File;
          id?: string | null;
        }[]
      | null;
  };
  video?: {
    subtype?: (string | null) | Key;
  };
  game?: {
    demo?: boolean | null;
    platform?: (string | null) | Key;
    audioLanguages?: (string | Language)[] | null;
    subtitleLanguages?: (string | Language)[] | null;
    interfacesLanguages?: (string | Language)[] | null;
  };
  releaseDate?: string | null;
  categories?: (string | Key)[] | null;
  sizeEnabled?: boolean | null;
  size?: {
    width: number;
    height: number;
    thickness?: number | null;
  };
  priceEnabled?: boolean | null;
  price?: {
    amount: number;
    currency: string | Currency;
  };
  translations?:
    | {
        language: string | Language;
        description: {
          [k: string]: unknown;
        }[];
        id?: string | null;
      }[]
    | null;
  urls?:
    | {
        url: string;
        id?: string | null;
      }[]
    | null;
  parentFolders?: (string | LibraryFolder)[] | null;
  parentItems?: (string | LibraryItem)[] | null;
  subitems?: (string | LibraryItem)[] | null;
  contents?:
    | {
        content: string | Content;
        pageStart?: number | null;
        pageEnd?: number | null;
        timeStart?: number | null;
        timeEnd?: number | null;
        note?:
          | {
              [k: string]: unknown;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface LibraryItemThumbnail {
  id: string;
  libraryItem?: (string | LibraryItem)[] | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface LibraryItemGallery {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface Recorder {
  id: string;
  username: string;
  avatar?: string | RecordersThumbnail | null;
  languages?: (string | Language)[] | null;
  biographies?: RecorderBiographies;
  role?: ('Admin' | 'Recorder' | 'Api')[] | null;
  anonymize: boolean;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
export interface RecordersThumbnail {
  id: string;
  recorder?: (string | null) | Recorder;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface LibraryItemScans {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface File {
  id: string;
  filename: string;
  type: 'LibraryScans' | 'LibrarySoundtracks' | 'ContentVideo' | 'ContentAudio';
  updatedAt: string;
  createdAt: string;
}
export interface Key {
  id: string;
  name: string;
  type:
    | 'Contents'
    | 'LibraryAudio'
    | 'LibraryVideo'
    | 'LibraryTextual'
    | 'LibraryGroup'
    | 'Library'
    | 'Weapons'
    | 'GamePlatforms'
    | 'Categories'
    | 'Wordings';
  translations?: CategoryTranslations;
}
export interface Currency {
  id: string;
}
export interface Content {
  id: string;
  slug: string;
  thumbnail?: string | ContentsThumbnail | null;
  categories?: (string | Key)[] | null;
  type?: (string | null) | Key;
  libraryItems?: (string | LibraryItem)[] | null;
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    pretitle?: string | null;
    title: string;
    subtitle?: string | null;
    summary?:
      | {
          [k: string]: unknown;
        }[]
      | null;
    textContent?:
      | {
          [k: string]: unknown;
        }[]
      | null;
    textTranscribers?: (string | Recorder)[] | null;
    textTranslators?: (string | Recorder)[] | null;
    textProofreaders?: (string | Recorder)[] | null;
    textNotes?:
      | {
          [k: string]: unknown;
        }[]
      | null;
    video?: (string | null) | File;
    videoNotes?:
      | {
          [k: string]: unknown;
        }[]
      | null;
    audio?: (string | null) | File;
    id?: string | null;
  }[];
  folders?: (string | ContentsFolder)[] | null;
  previousContents?: (string | Content)[] | null;
  nextContents?: (string | Content)[] | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface ContentsThumbnail {
  id: string;
  contents?: (string | Content)[] | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface ContentsFolder {
  id: string;
  slug: string;
  translations?:
    | {
        language: string | Language;
        name: string;
        id?: string | null;
      }[]
    | null;
  subfolders?: (string | ContentsFolder)[] | null;
  contents?: (string | Content)[] | null;
}
export interface Post {
  id: string;
  slug: string;
  thumbnail?: string | PostThumbnail | null;
  authors: (string | Recorder)[];
  categories?: (string | Key)[] | null;
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    title: string;
    summary?:
      | {
          [k: string]: unknown;
        }[]
      | null;
    content?:
      | {
          [k: string]: unknown;
        }[]
      | null;
    translators?: (string | Recorder)[] | null;
    proofreaders?: (string | Recorder)[] | null;
    id?: string | null;
  }[];
  publishedDate: string;
  hidden?: boolean | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface PostThumbnail {
  id: string;
  posts?: (string | Post)[] | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface ChronologyItem {
  id: string;
  name?: string | null;
  date: {
    year: number;
    month?: number | null;
    day?: number | null;
  };
  events: {
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      title?: string | null;
      description?:
        | {
            [k: string]: unknown;
          }[]
        | null;
      notes?:
        | {
            [k: string]: unknown;
          }[]
        | null;
      transcribers?: (string | Recorder)[] | null;
      translators?: (string | Recorder)[] | null;
      proofreaders?: (string | Recorder)[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface ChronologyEra {
  id: string;
  slug: string;
  startingYear: number;
  endingYear: number;
  translations?:
    | {
        language: string | Language;
        title: string;
        description?:
          | {
              [k: string]: unknown;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  events?: (string | ChronologyItem)[] | null;
  updatedAt: string;
  createdAt: string;
}
export interface Weapon {
  id: string;
  slug: string;
  thumbnail?: string | WeaponsThumbnail | null;
  type: string | Key;
  group?: (string | null) | WeaponsGroup;
  appearances: {
    categories: (string | Key)[];
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      name: string;
      description?:
        | {
            [k: string]: unknown;
          }[]
        | null;
      level1?:
        | {
            [k: string]: unknown;
          }[]
        | null;
      level2?:
        | {
            [k: string]: unknown;
          }[]
        | null;
      level3?:
        | {
            [k: string]: unknown;
          }[]
        | null;
      level4?:
        | {
            [k: string]: unknown;
          }[]
        | null;
      transcribers?: (string | Recorder)[] | null;
      translators?: (string | Recorder)[] | null;
      proofreaders?: (string | Recorder)[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface WeaponsThumbnail {
  id: string;
  weapon?: (string | null) | Weapon;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface WeaponsGroup {
  id: string;
  slug: string;
  translations?:
    | {
        language: string | Language;
        name: string;
        id?: string | null;
      }[]
    | null;
  weapons?: (string | Weapon)[] | null;
}
export interface Note {
  id: string;
  note: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Video {
  id: string;
  uid: string;
  gone: boolean;
  source: 'YouTube' | 'NicoNico' | 'Tumblr';
  title: string;
  description?: string | null;
  likes?: number | null;
  views?: number | null;
  publishedDate: string;
  channel?: (string | null) | VideosChannel;
}
export interface VideosChannel {
  id: string;
  uid: string;
  title: string;
  subscribers?: number | null;
}
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'recorders';
    value: string | Recorder;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}