/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export type CategoryTranslations = {
  language: string | Language;
  name: string;
  short?: string;
  id?: string;
}[];
export type RecorderBiographies = {
  language: string | Language;
  biography: {
    [k: string]: unknown;
  }[];
  id?: string;
}[];

export interface Config {
  collections: {
    'library-folders': LibraryFolder;
    'library-items': LibraryItem;
    contents: Content;
    'contents-folders': ContentsFolder;
    posts: Post;
    'chronology-items': ChronologyItem;
    'chronology-eras': ChronologyEra;
    weapons: Weapon;
    'weapons-groups': WeaponsGroup;
    'weapons-thumbnails': WeaponsThumbnail;
    'contents-thumbnails': ContentsThumbnail;
    'library-items-thumbnails': LibraryItemThumbnail;
    'library-items-scans': LibraryItemScans;
    'library-items-gallery': LibraryItemGallery;
    'recorders-thumbnails': RecordersThumbnail;
    'posts-thumbnails': PostThumbnail;
    files: File;
    Notes: Note;
    videos: Video;
    'videos-channels': VideosChannel;
    languages: Language;
    currencies: Currency;
    recorders: Recorder;
    keys: Key;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
export interface LibraryFolder {
  id: string;
  slug: string;
  translations?: {
    language: string | Language;
    name: string;
    description?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  subfolders?: string[] | LibraryFolder[];
  items?: string[] | LibraryItem[];
}
export interface Language {
  id: string;
  name: string;
}
export interface LibraryItem {
  id: string;
  itemType?: 'Textual' | 'Audio' | 'Video' | 'Game' | 'Other';
  digital: boolean;
  slug: string;
  thumbnail?: string | LibraryItemThumbnail;
  pretitle?: string;
  title: string;
  subtitle?: string;
  rootItem: boolean;
  primary: boolean;
  gallery?: {
    image?: string | LibraryItemGallery;
    id?: string;
  }[];
  scans?: {
    cover?: {
      front?: string | LibraryItemScans;
      spine?: string | LibraryItemScans;
      back?: string | LibraryItemScans;
      insideFront?: string | LibraryItemScans;
      flapFront?: string | LibraryItemScans;
      flapBack?: string | LibraryItemScans;
      insideFlapFront?: string | LibraryItemScans;
      insideFlapBack?: string | LibraryItemScans;
      id?: string;
    }[];
    dustjacket?: {
      front?: string | LibraryItemScans;
      spine?: string | LibraryItemScans;
      back?: string | LibraryItemScans;
      insideFront?: string | LibraryItemScans;
      insideSpine?: string | LibraryItemScans;
      insideBack?: string | LibraryItemScans;
      flapFront?: string | LibraryItemScans;
      flapBack?: string | LibraryItemScans;
      insideFlapFront?: string | LibraryItemScans;
      insideFlapBack?: string | LibraryItemScans;
      id?: string;
    }[];
    obi?: {
      front?: string | LibraryItemScans;
      spine?: string | LibraryItemScans;
      back?: string | LibraryItemScans;
      insideFront?: string | LibraryItemScans;
      insideSpine?: string | LibraryItemScans;
      insideBack?: string | LibraryItemScans;
      flapFront?: string | LibraryItemScans;
      flapBack?: string | LibraryItemScans;
      insideFlapFront?: string | LibraryItemScans;
      insideFlapBack?: string | LibraryItemScans;
      id?: string;
    }[];
    pages?: {
      page: number;
      image: string | LibraryItemScans;
      id?: string;
    }[];
    downloadable: boolean;
    id?: string;
  }[];
  textual?: {
    subtype?: string[] | Key[];
    languages?: string[] | Language[];
    pageCount?: number;
    bindingType?: 'Paperback' | 'Hardcover';
    pageOrder?: 'LeftToRight' | 'RightToLeft';
  };
  audio?: {
    audioSubtype?: string[] | Key[];
    tracks?: {
      title: string;
      file: string | File;
      id?: string;
    }[];
  };
  releaseDate?: string;
  categories?: string[] | Key[];
  translations?: {
    language: string | Language;
    description: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  size?: {
    width: number;
    height: number;
    thickness?: number;
    id?: string;
  }[];
  price?: {
    amount: number;
    currency: string | Currency;
    id?: string;
  }[];
  urls?: {
    url: string;
    id?: string;
  }[];
  contents?: {
    content: string | Content;
    pageStart?: number;
    pageEnd?: number;
    timeStart?: number;
    timeEnd?: number;
    note?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface LibraryItemThumbnail {
  id: string;
  libraryItem?: string[] | LibraryItem[];
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumb?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    square?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface LibraryItemGallery {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumb?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    small?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface LibraryItemScans {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumb?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    large?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface Key {
  id: string;
  name: string;
  type:
    | 'Contents'
    | 'LibraryAudio'
    | 'LibraryVideo'
    | 'LibraryTextual'
    | 'LibraryGroup'
    | 'Library'
    | 'Weapons'
    | 'GamePlatforms'
    | 'Categories'
    | 'Wordings';
  translations?: CategoryTranslations;
}
export interface File {
  id: string;
  filename: string;
  type: 'LibraryScans' | 'LibrarySoundtracks' | 'ContentVideo' | 'ContentAudio';
  updatedAt: string;
  createdAt: string;
}
export interface Currency {
  id: string;
}
export interface Content {
  id: string;
  slug: string;
  thumbnail?: string | ContentsThumbnail;
  categories?: string[] | Key[];
  type?: string | Key;
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    pretitle?: string;
    title: string;
    subtitle?: string;
    summary?: {
      [k: string]: unknown;
    }[];
    textContent?: {
      [k: string]: unknown;
    }[];
    textTranscribers?: string[] | Recorder[];
    textTranslators?: string[] | Recorder[];
    textProofreaders?: string[] | Recorder[];
    textNotes?: {
      [k: string]: unknown;
    }[];
    video?: string | File;
    videoNotes?: {
      [k: string]: unknown;
    }[];
    audio?: string | File;
    id?: string;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface ContentsThumbnail {
  id: string;
  contents?: string[] | Content[];
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumb?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface Recorder {
  id: string;
  username: string;
  avatar?: string | RecordersThumbnail;
  languages?: string[] | Language[];
  biographies?: RecorderBiographies;
  role?: ('Admin' | 'Recorder' | 'Api')[];
  anonymize: boolean;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface RecordersThumbnail {
  id: string;
  recorder?: string | Recorder;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumb?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    square?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface ContentsFolder {
  id: string;
  slug: string;
  translations?: {
    language: string | Language;
    name: string;
    id?: string;
  }[];
  subfolders?: string[] | ContentsFolder[];
  contents?: string[] | Content[];
}
export interface Post {
  id: string;
  slug: string;
  thumbnail?: string | PostThumbnail;
  authors:
    | {
        relationTo: 'recorders';
        value: string;
      }[]
    | {
        relationTo: 'recorders';
        value: Recorder;
      }[];
  categories?:
    | {
        relationTo: 'keys';
        value: string;
      }[]
    | {
        relationTo: 'keys';
        value: Key;
      }[];
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    title: string;
    summary?: {
      [k: string]: unknown;
    }[];
    translators?: string[] | Recorder[];
    proofreaders?: string[] | Recorder[];
    content?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  publishedDate: string;
  hidden?: boolean;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface PostThumbnail {
  id: string;
  posts?: string[] | Post[];
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumb?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface ChronologyItem {
  id: string;
  name?: string;
  date: {
    year: number;
    month?: number;
    day?: number;
  };
  events: {
    source?:
      | {
          relationTo: 'contents';
          value: string | Content;
        }
      | {
          relationTo: 'library-items';
          value: string | LibraryItem;
        };
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      title?: string;
      description?: {
        [k: string]: unknown;
      }[];
      notes?: {
        [k: string]: unknown;
      }[];
      transcribers?: string[] | Recorder[];
      translators?: string[] | Recorder[];
      proofreaders?: string[] | Recorder[];
      id?: string;
    }[];
    id?: string;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface ChronologyEra {
  id: string;
  slug: string;
  startingYear: number;
  endingYear: number;
  translations?: {
    language: string | Language;
    title: string;
    description?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  events?: string[] | ChronologyItem[];
  updatedAt: string;
  createdAt: string;
}
export interface Weapon {
  id: string;
  slug: string;
  thumbnail?: string | WeaponsThumbnail;
  type: string | Key;
  group?: string | WeaponsGroup;
  appearances: {
    categories: string[] | Key[];
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      name: string;
      description?: {
        [k: string]: unknown;
      }[];
      level1?: {
        [k: string]: unknown;
      }[];
      level2?: {
        [k: string]: unknown;
      }[];
      level3?: {
        [k: string]: unknown;
      }[];
      level4?: {
        [k: string]: unknown;
      }[];
      transcribers?: string[] | Recorder[];
      translators?: string[] | Recorder[];
      proofreaders?: string[] | Recorder[];
      id?: string;
    }[];
    id?: string;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface WeaponsThumbnail {
  id: string;
  weapon?: string | Weapon;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumb?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    small?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface WeaponsGroup {
  id: string;
  slug: string;
  translations?: {
    language: string | Language;
    name: string;
    id?: string;
  }[];
  weapons?: string[] | Weapon[];
}
export interface Note {
  id: string;
  note: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Video {
  id: string;
  uid: string;
  gone: boolean;
  source: 'YouTube' | 'NicoNico' | 'Tumblr';
  title: string;
  description?: string;
  likes?: number;
  views?: number;
  publishedDate: string;
  channel?: string | VideosChannel;
}
export interface VideosChannel {
  id: string;
  uid: string;
  title: string;
  subscribers?: number;
}
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'recorders';
    value: string | Recorder;
  };
  key?: string;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadMigration {
  id: string;
  name?: string;
  batch?: number;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}