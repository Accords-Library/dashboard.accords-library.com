/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export type CategoryTranslations = {
  language: string | Language;
  name: string;
  short?: string;
  id?: string;
}[];
export type RecorderBiographies = {
  language: string | Language;
  biography?: string;
  id?: string;
}[];
export type ContentFoldersTranslation = {
  language: string | Language;
  name: string;
  id?: string;
}[];

export interface Config {
  collections: {
    "library-items": LibraryItem;
    contents: Content;
    "content-folders": ContentFolder;
    posts: Post;
    "content-thumbnails": ContentThumbnail;
    "library-item-thumbnails": LibraryItemThumbnail;
    "recorder-thumbnails": RecorderThumbnail;
    "post-thumbnails": PostThumbnail;
    files: File;
    languages: Language;
    currencies: Currency;
    recorders: Recorder;
    keys: Key;
  };
  globals: {};
}
export interface LibraryItem {
  id: string;
  slug: string;
  thumbnail?: string | LibraryItemThumbnail;
  pretitle?: string;
  title: string;
  subtitle?: string;
  rootItem: boolean;
  primary: boolean;
  digital: boolean;
  downloadable: boolean;
  scans?: {
    cover?: {
      front?: string | LibraryItemThumbnail;
      spine?: string | LibraryItemThumbnail;
      back?: string | LibraryItemThumbnail;
      id?: string;
    }[];
    dustjacket?: {
      front?: string | LibraryItemThumbnail;
      spine?: string | LibraryItemThumbnail;
      back?: string | LibraryItemThumbnail;
      id?: string;
    }[];
    obibelt?: {
      front?: string | LibraryItemThumbnail;
      spine?: string | LibraryItemThumbnail;
      back?: string | LibraryItemThumbnail;
      id?: string;
    }[];
    pages?: {
      page: number;
      image: string | LibraryItemThumbnail;
      id?: string;
    }[];
    id?: string;
  }[];
  size?: {
    width: number;
    height: number;
    thickness?: number;
    id?: string;
  }[];
  price?: {
    amount: number;
    currency: string | Currency;
    id?: string;
  }[];
  itemType?: "Textual" | "Audio" | "Video" | "Game" | "Other";
  textual?: {
    subtype?:
      | {
          value: string;
          relationTo: "keys";
        }[]
      | {
          value: Key;
          relationTo: "keys";
        }[];
    languages?:
      | {
          value: string;
          relationTo: "languages";
        }[]
      | {
          value: Language;
          relationTo: "languages";
        }[];
    pageCount?: number;
    bindingType?: "Paperback" | "Hardcover";
    pageOrder?: "LeftToRight" | "RightToLeft";
  };
  audio?: {
    audioSubtype?:
      | {
          value: string;
          relationTo: "keys";
        }[]
      | {
          value: Key;
          relationTo: "keys";
        }[];
  };
  releaseDate?: string;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: "draft" | "published";
}
export interface LibraryItemThumbnail {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    large?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface Currency {
  id: string;
}
export interface Key {
  id: string;
  slug: string;
  type:
    | "Contents"
    | "LibraryAudio"
    | "LibraryVideo"
    | "LibraryTextual"
    | "LibraryGroup"
    | "Library"
    | "Weapons"
    | "GamePlatforms"
    | "Categories"
    | "Wordings";
  translations?: CategoryTranslations;
}
export interface Language {
  id: string;
  name: string;
}
export interface Recorder {
  id: string;
  username: string;
  avatar?: string | RecorderThumbnail;
  languages?: string[] | Language[];
  biographies?: RecorderBiographies;
  role?: ("Admin" | "Recorder")[];
  anonymize: boolean;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface RecorderThumbnail {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    small?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface Content {
  id: string;
  slug: string;
  thumbnail?: string | ContentThumbnail;
  categories?:
    | {
        value: string;
        relationTo: "keys";
      }[]
    | {
        value: Key;
        relationTo: "keys";
      }[];
  type?: {
    value: string | Key;
    relationTo: "keys";
  };
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    pretitle?: string;
    title: string;
    subtitle?: string;
    summary?: string;
    textTranscribers?: string[] | Recorder[];
    textTranslators?: string[] | Recorder[];
    textProofreaders?: string[] | Recorder[];
    textContent?: (TextBlock | Section | Tabs | TranscriptBlock | QuoteBlock)[];
    textNotes?: string;
    video?: string | File;
    videoNotes?: string;
    audio?: string | File;
    id?: string;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: "draft" | "published";
}
export interface ContentThumbnail {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface TextBlock {
  content: {
    [k: string]: unknown;
  }[];
  id?: string;
  blockName?: string;
  blockType: "textBlock";
}
export interface Section {
  content?: (Section_Section | Section_Tabs | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Section {
  content?: (
    | Section_Section_Section
    | Section_Section_Tabs
    | TranscriptBlock
    | QuoteBlock
    | TextBlock
  )[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Section_Section {
  content?: (
    | Section_Section_Section_Section
    | Section_Section_Section_Tabs
    | TranscriptBlock
    | QuoteBlock
    | TextBlock
  )[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Section_Section_Section {
  content?: (Section_Section_Section_Section_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Section_Section_Section_Section {
  content?: (TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface TranscriptBlock {
  lines: (LineBlock | CueBlock)[];
  id?: string;
  blockName?: string;
  blockType: "transcriptBlock";
}
export interface LineBlock {
  content: {
    [k: string]: unknown;
  }[];
  id?: string;
  blockName?: string;
  blockType: "lineBlock";
}
export interface CueBlock {
  content: string;
  id?: string;
  blockName?: string;
  blockType: "cueBlock";
}
export interface QuoteBlock {
  from: string;
  content: {
    [k: string]: unknown;
  }[];
  id?: string;
  blockName?: string;
  blockType: "quoteBlock";
}
export interface Section_Section_Section_Tabs {
  tabs?: Section_Section_Section_Tabs_Tab[];
  id?: string;
  blockName?: string;
  blockType: "tabs";
}
export interface Section_Section_Section_Tabs_Tab {
  content?: (Section_Section_Section_Tabs_Tab_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "tab";
}
export interface Section_Section_Section_Tabs_Tab_Section {
  content?: (TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Section_Tabs {
  tabs?: Section_Section_Tabs_Tab[];
  id?: string;
  blockName?: string;
  blockType: "tabs";
}
export interface Section_Section_Tabs_Tab {
  content?: (Section_Section_Tabs_Tab_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "tab";
}
export interface Section_Section_Tabs_Tab_Section {
  content?: (Section_Section_Tabs_Tab_Section_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Section_Tabs_Tab_Section_Section {
  content?: (TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Tabs {
  tabs?: Section_Tabs_Tab[];
  id?: string;
  blockName?: string;
  blockType: "tabs";
}
export interface Section_Tabs_Tab {
  content?: (Section_Tabs_Tab_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "tab";
}
export interface Section_Tabs_Tab_Section {
  content?: (Section_Tabs_Tab_Section_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Tabs_Tab_Section_Section {
  content?: (Section_Tabs_Tab_Section_Section_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Section_Tabs_Tab_Section_Section_Section {
  content?: (TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Tabs {
  tabs?: Tabs_Tab[];
  id?: string;
  blockName?: string;
  blockType: "tabs";
}
export interface Tabs_Tab {
  content?: (Tabs_Tab_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "tab";
}
export interface Tabs_Tab_Section {
  content?: (Tabs_Tab_Section_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Tabs_Tab_Section_Section {
  content?: (Tabs_Tab_Section_Section_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Tabs_Tab_Section_Section_Section {
  content?: (Tabs_Tab_Section_Section_Section_Section | TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface Tabs_Tab_Section_Section_Section_Section {
  content?: (TranscriptBlock | QuoteBlock | TextBlock)[];
  id?: string;
  blockName?: string;
  blockType: "section";
}
export interface File {
  id: string;
  filename: string;
  type: "LibraryScans" | "LibrarySoundtracks" | "ContentVideo" | "ContentAudio";
  updatedAt: string;
  createdAt: string;
}
export interface ContentFolder {
  id: string;
  slug: string;
  translations?: ContentFoldersTranslation;
  subfolders?:
    | {
        value: string;
        relationTo: "content-folders";
      }[]
    | {
        value: ContentFolder;
        relationTo: "content-folders";
      }[];
  contents?:
    | {
        value: string;
        relationTo: "contents";
      }[]
    | {
        value: Content;
        relationTo: "contents";
      }[];
}
export interface Post {
  id: string;
  slug: string;
  thumbnail?: string | PostThumbnail;
  authors:
    | {
        value: string;
        relationTo: "recorders";
      }[]
    | {
        value: Recorder;
        relationTo: "recorders";
      }[];
  categories?:
    | {
        value: string;
        relationTo: "keys";
      }[]
    | {
        value: Key;
        relationTo: "keys";
      }[];
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    title: string;
    summary?: string;
    translators?: string[] | Recorder[];
    proofreaders?: string[] | Recorder[];
    content?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  publishedDate: string;
  hidden?: boolean;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: "draft" | "published";
}
export interface PostThumbnail {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    og?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
