/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RecorderBiographies".
 */
export type RecorderBiographies =
  | {
      language: string | Language;
      biography: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      };
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CategoryTranslations".
 */
export type CategoryTranslations = {
  language: string | Language;
  name: string;
  id?: string | null;
}[];

export interface Config {
  collections: {
    folders: Folder;
    'folders-thumbnails': FoldersThumbnail;
    pages: Page;
    'chronology-items': ChronologyItem;
    'chronology-eras': ChronologyEra;
    weapons: Weapon;
    'weapons-groups': WeaponsGroup;
    'weapons-thumbnails': WeaponsThumbnail;
    'recorders-thumbnails': RecordersThumbnail;
    notes: Note;
    videos: Video;
    'videos-channels': VideosChannel;
    languages: Language;
    currencies: Currency;
    recorders: Recorder;
    tags: Tag;
    'tags-groups': TagsGroup;
    images: Image;
    wordings: Wording;
    collectibles: Collectible;
    'generic-contents': GenericContent;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "folders".
 */
export interface Folder {
  id: string;
  slug: string;
  icon?: string | null;
  lightThumbnail?: string | FoldersThumbnail | null;
  darkThumbnail?: string | FoldersThumbnail | null;
  translations?:
    | {
        language: string | Language;
        name: string;
        description?: {
          root: {
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            type: string;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  sections?:
    | {
        translations?:
          | {
              language: string | Language;
              name: string;
              id?: string | null;
            }[]
          | null;
        subfolders?: (string | Folder)[] | null;
        id?: string | null;
      }[]
    | null;
  files?:
    | (
        | {
            relationTo: 'collectibles';
            value: string | Collectible;
          }
        | {
            relationTo: 'pages';
            value: string | Page;
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "folders-thumbnails".
 */
export interface FoldersThumbnail {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "languages".
 */
export interface Language {
  id: string;
  name: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "collectibles".
 */
export interface Collectible {
  id: string;
  slug: string;
  thumbnail?: string | Image | null;
  nature: 'Physical' | 'Digital';
  languages?: (string | Language)[] | null;
  tags?: (string | Tag)[] | null;
  translations: {
    language: string | Language;
    pretitle?: string | null;
    title: string;
    subtitle?: string | null;
    description?: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    id?: string | null;
  }[];
  gallery?:
    | {
        image: string | Image;
        id?: string | null;
      }[]
    | null;
  scansEnabled?: boolean | null;
  scans?: {
    scanners: (string | Recorder)[];
    cleaners: (string | Recorder)[];
    typesetters?: (string | Recorder)[] | null;
    coverEnabled?: boolean | null;
    cover?: {
      front?: string | Image | null;
      spine?: string | Image | null;
      back?: string | Image | null;
      insideFront?: string | Image | null;
      insideBack?: string | Image | null;
      flapFront?: string | Image | null;
      flapBack?: string | Image | null;
      insideFlapFront?: string | Image | null;
      insideFlapBack?: string | Image | null;
    };
    dustjacketEnabled?: boolean | null;
    dustjacket?: {
      front?: string | Image | null;
      spine?: string | Image | null;
      back?: string | Image | null;
      insideFront?: string | Image | null;
      insideSpine?: string | Image | null;
      insideBack?: string | Image | null;
      flapFront?: string | Image | null;
      flapBack?: string | Image | null;
      insideFlapFront?: string | Image | null;
      insideFlapBack?: string | Image | null;
    };
    obiEnabled?: boolean | null;
    obi?: {
      front?: string | Image | null;
      spine?: string | Image | null;
      back?: string | Image | null;
      insideFront?: string | Image | null;
      insideSpine?: string | Image | null;
      insideBack?: string | Image | null;
      flapFront?: string | Image | null;
      flapBack?: string | Image | null;
      insideFlapFront?: string | Image | null;
      insideFlapBack?: string | Image | null;
    };
    pages?:
      | {
          page: number;
          image: string | Image;
          id?: string | null;
        }[]
      | null;
  };
  urls?:
    | {
        url: string;
        id?: string | null;
      }[]
    | null;
  releaseDate?: string | null;
  priceEnabled?: boolean | null;
  price?: {
    amount: number;
    currency: string | Currency;
  };
  sizeEnabled?: boolean | null;
  size?: {
    width: number;
    height: number;
    thickness?: number | null;
  };
  weightEnabled?: boolean | null;
  weight?: {
    amount: number;
  };
  pageInfoEnabled?: boolean | null;
  pageInfo?: {
    pageCount: number;
    bindingType?: ('Paperback' | 'Hardcover') | null;
    pageOrder?: ('Left to right' | 'Right to left') | null;
  };
  folders?: (string | Folder)[] | null;
  parentItems?: (string | Collectible)[] | null;
  subitems?: (string | Collectible)[] | null;
  contents?:
    | {
        content:
          | {
              relationTo: 'pages';
              value: string | Page;
            }
          | {
              relationTo: 'generic-contents';
              value: string | GenericContent;
            };
        range?:
          | (
              | {
                  start: number;
                  end: number;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'pageRange';
                }
              | {
                  start: string;
                  end: string;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'timeRange';
                }
              | {
                  translations?:
                    | {
                        language: string | Language;
                        note: {
                          root: {
                            children: {
                              type: string;
                              version: number;
                              [k: string]: unknown;
                            }[];
                            direction: ('ltr' | 'rtl') | null;
                            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                            indent: number;
                            type: string;
                            version: number;
                          };
                          [k: string]: unknown;
                        };
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'other';
                }
            )[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name?: string | null;
  slug: string;
  translations: {
    language: string | Language;
    name: string;
    id?: string | null;
  }[];
  group: string | TagsGroup;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags-groups".
 */
export interface TagsGroup {
  id: string;
  slug: string;
  icon?: string | null;
  translations: {
    language: string | Language;
    name: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recorders".
 */
export interface Recorder {
  id: string;
  username: string;
  avatar?: string | RecordersThumbnail | null;
  languages?: (string | Language)[] | null;
  biographies?: RecorderBiographies;
  role?: ('Admin' | 'Recorder' | 'Api')[] | null;
  anonymize: boolean;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recorders-thumbnails".
 */
export interface RecordersThumbnail {
  id: string;
  recorder?: (string | null) | Recorder;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies".
 */
export interface Currency {
  id: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  type: 'Content' | 'Post' | 'Generic';
  slug: string;
  thumbnail?: string | Image | null;
  tags?: (string | Tag)[] | null;
  authors?: (string | Recorder)[] | null;
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    pretitle?: string | null;
    title: string;
    subtitle?: string | null;
    summary?: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    content: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    };
    transcribers?: (string | Recorder)[] | null;
    translators?: (string | Recorder)[] | null;
    proofreaders?: (string | Recorder)[] | null;
    id?: string | null;
  }[];
  folders?: (string | Folder)[] | null;
  collectibles?: (string | Collectible)[] | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generic-contents".
 */
export interface GenericContent {
  id: string;
  name: string;
  translations: {
    language: string | Language;
    name: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chronology-items".
 */
export interface ChronologyItem {
  id: string;
  name?: string | null;
  date: {
    year: number;
    month?: number | null;
    day?: number | null;
  };
  events: {
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      title?: string | null;
      description?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      notes?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      transcribers?: (string | Recorder)[] | null;
      translators?: (string | Recorder)[] | null;
      proofreaders?: (string | Recorder)[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chronology-eras".
 */
export interface ChronologyEra {
  id: string;
  slug: string;
  startingYear: number;
  endingYear: number;
  translations?:
    | {
        language: string | Language;
        title: string;
        description?: {
          root: {
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            type: string;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  events?: (string | ChronologyItem)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weapons".
 */
export interface Weapon {
  id: string;
  slug: string;
  thumbnail?: string | WeaponsThumbnail | null;
  group?: (string | null) | WeaponsGroup;
  appearances: {
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      name: string;
      description?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level1?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level2?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level3?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level4?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      transcribers?: (string | Recorder)[] | null;
      translators?: (string | Recorder)[] | null;
      proofreaders?: (string | Recorder)[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weapons-thumbnails".
 */
export interface WeaponsThumbnail {
  id: string;
  weapon?: (string | null) | Weapon;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weapons-groups".
 */
export interface WeaponsGroup {
  id: string;
  slug: string;
  translations?:
    | {
        language: string | Language;
        name: string;
        id?: string | null;
      }[]
    | null;
  weapons?: (string | Weapon)[] | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notes".
 */
export interface Note {
  id: string;
  note: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
  id: string;
  uid: string;
  gone: boolean;
  source: 'YouTube' | 'NicoNico' | 'Tumblr';
  title: string;
  description?: string | null;
  likes?: number | null;
  views?: number | null;
  publishedDate: string;
  channel?: (string | null) | VideosChannel;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos-channels".
 */
export interface VideosChannel {
  id: string;
  uid: string;
  title: string;
  subscribers?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wordings".
 */
export interface Wording {
  id: string;
  name: string;
  translations: CategoryTranslations;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'recorders';
    value: string | Recorder;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SpacerBlock".
 */
export interface SpacerBlock {
  size: 'Small' | 'Medium' | 'Large' | 'Extra Large';
  blockType: 'spacerBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LineBlock".
 */
export interface LineBlock {
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  blockType: 'lineBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CueBlock".
 */
export interface CueBlock {
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  blockType: 'cueBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TranscriptBlock".
 */
export interface TranscriptBlock {
  lines: (LineBlock | CueBlock | SpacerBlock)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'transcriptBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SectionBlock".
 */
export interface SectionBlock {
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'sectionBlock';
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}